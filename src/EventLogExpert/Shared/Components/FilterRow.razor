@inject IState<AvailableFilterState> AvailableFilterPaneState
@inject IDispatcher Dispatcher

<div class="filter-row @(Value.IsEditing ? "edit-grid" : "")">
    @if (Value.IsEditing)
    {
        <div>

            <span>Filter On: </span>
            <select class="input-filter-select" @bind="@Value.FilterType" disabled="@(Value.SubFilters.Count > 0)">
                @foreach (FilterType type in Enum.GetValues(typeof(FilterType)))
                {
                    <option value="@type">@type.ToString()</option>
                }
            </select>

            <span>Comparison: </span>
            <select class="input-filter-select" @bind="@Value.FilterComparison">
                @foreach (FilterComparison type in Enum.GetValues(typeof(FilterComparison)))
                {
                    <option value="@type">@type.ToFullString()</option>
                }
            </select>

            <span>Value: </span>
            @switch (Value.FilterType)
            {
                case FilterType.EventId :
                    <FilterSelect CssClass="input-filter-id" TInput="int"
                        Value="@Value.FilterValue" OnValueChangedEvent="@Value.UpdateFilterValue"
                        Items="AvailableFilterPaneState.Value.EventIdsAll.OrderBy(id => id)" />
                    break;
                case FilterType.Severity :
                    <FilterSelect CssClass="input-filter-severity" TInput="SeverityLevel"
                        Value="@Value.FilterValue" OnValueChangedEvent="@Value.UpdateFilterValue" />
                    break;
                case FilterType.Provider :
                    <FilterSelect CssClass="input-filter-dropdown" TInput="string"
                        Value="@Value.FilterValue" OnValueChangedEvent="@Value.UpdateFilterValue"
                        Items="AvailableFilterPaneState.Value.EventProviderNamesAll.OrderBy(n => n)" />
                    break;
                case FilterType.Task :
                    <FilterSelect CssClass="input-filter-dropdown" TInput="string"
                        Value="@Value.FilterValue" OnValueChangedEvent="@Value.UpdateFilterValue"
                        Items="AvailableFilterPaneState.Value.TaskNamesAll.OrderBy(n => n)" />
                    break;
                case FilterType.Description :
                default :
                    <FilterInput Value="@Value.FilterValue" OnValueChangedEvent="@Value.UpdateFilterValue" />
                    break;
            }

        </div>

        <button class="button-primary row-center" @onclick="AddSubFilter">
            <i class="bi bi-plus-circle"></i> Add Sub Filter
        </button>
    }
    else if (string.IsNullOrWhiteSpace(Value.ComparisonString))
    {
        <span>No Filter Specified</span>
    }
    else
    {
        <span>@Value.ComparisonString</span>
    }

    <div class="row-justify-right">
        @if (Value.IsEditing)
        {
            <button class="button-save" @onclick="SaveFilter">
                <i class="bi bi-check-circle"></i> Save
            </button>
        }
        else
        {
            <button class="button-primary" @onclick="EditFilter">
                <i class="bi bi-funnel"></i> Edit
            </button>
        }
        <button class="button-remove" @onclick="RemoveFilter">
            <i class="bi bi-dash-circle"></i> Remove
        </button>
    </div>

</div>

<div class="sub-filter-row">
    @if (Value.SubFilters.Any() && Value.IsEditing)
    {
        @foreach (var item in Value.SubFilters)
        {
            <SubFilterRow ParentId="@Value.Id" FilterType="@Value.FilterType" Value="@item" />
        }
    }
</div>
