@using EventLogExpert.UI.Store.EventLog
@using EventLogExpert.UI
@inject IState<EventLogState> EventLogState

<div class="flex-center-aligned-row px-4">
    <div class="flex-align-center">
        <span>Join On: </span>
        <ValueSelect CssClass="input filter-dropdown" T="FilterType" @bind-Value="Value.FilterType" ToStringFunc="x => x.ToFullString()">
            @foreach (FilterType item in Enum.GetValues(typeof(FilterType)))
            {
                <ValueSelectItem T="FilterType" Value="item" />
            }
        </ValueSelect>

        <span>Comparison: </span>
        <ValueSelect CssClass="input filter-dropdown" T="FilterComparison" @bind-Value="Value.FilterComparison" ToStringFunc="x => x.ToFullString()">
            @foreach (FilterComparison item in Enum.GetValues(typeof(FilterComparison)))
            {
                <ValueSelectItem T="FilterComparison" Value="item" />
            }
        </ValueSelect>

        <span>Value: </span>
        @if (Value.FilterType is FilterType.Description)
        {
            <TextInput CssClass="input filter-description" @bind-Value="@Value.FilterValue" />
        }
        else
        {
            <ValueSelect CssClass="input filter-value-dropdown" T="string" @bind-Value="Value.FilterValue" IsInput>
                <ValueSelectItem T="string" Value="string.Empty">All</ValueSelectItem>

                @switch (Value.FilterType)
                {
                    case FilterType.Id :
                        _filterItems = EventLogState.Value.ActiveLogs.Values.SelectMany(log => log.EventIds)
                            .Distinct().OrderBy(id => id).Select(id => id.ToString()).ToList();
                        break;
                    case FilterType.Level :
                        _filterItems = new List<string>();

                        foreach (SeverityLevel item in Enum.GetValues(typeof(SeverityLevel)))
                        {
                            _filterItems.Add(item.ToString());
                        }

                        break;
                    case FilterType.KeywordsDisplayNames :
                        _filterItems = EventLogState.Value.ActiveLogs.Values.SelectMany(log => log.KeywordNames)
                            .Distinct().OrderBy(name => name).Select(name => name.ToString()).ToList();

                        break;
                    case FilterType.Source :
                        _filterItems = EventLogState.Value.ActiveLogs.Values.SelectMany(log => log.EventProviderNames)
                            .Distinct().OrderBy(name => name).Select(name => name.ToString()).ToList();

                        break;
                    case FilterType.TaskCategory :
                        _filterItems = EventLogState.Value.ActiveLogs.Values.SelectMany(log => log.TaskNames)
                            .Distinct().OrderBy(name => name).Select(name => name.ToString()).ToList();

                        break;
                    case FilterType.Description :
                    default :
                        break;
                }

                @foreach (var item in FilteredItems)
                {
                    <ValueSelectItem T="string" Value="item" />
                }
            </ValueSelect>
        }

    </div>

    <button class="button button-red" @onclick="RemoveSubFilter">
        <i class="bi bi-dash-circle"></i> Remove
    </button>
</div>
