@using EventLogExpert.UI.Store.EventLog
@using EventLogExpert.UI
@inject IState<EventLogState> EventLogState

<div class="flex-space-between">
    @if (Value.IsEditing)
    {
        <div class="flex-align-center">
            <span>Filter On: </span>
            <ValueSelect CssClass="input filter-dropdown" T="FilterType" @bind-Value="Value.FilterType" ToStringFunc="x => x.ToFullString()">
                @foreach (FilterType item in Enum.GetValues(typeof(FilterType)))
                {
                    <ValueSelectItem T="FilterType" Value="item" />
                }
            </ValueSelect>

            <span>Comparison: </span>
            <ValueSelect CssClass="input filter-dropdown" T="FilterComparison" @bind-Value="Value.FilterComparison" ToStringFunc="x => x.ToFullString()">
                @foreach (FilterComparison item in Enum.GetValues(typeof(FilterComparison)))
                {
                    <ValueSelectItem T="FilterComparison" Value="item" />
                }
            </ValueSelect>

            <span>Value: </span>
            <div>
                @if (Value.FilterType is FilterType.Description)
                {
                    <TextInput CssClass="input filter-description" @bind-Value="@Value.FilterValue" />
                }
                else
                {
                    <ValueSelect CssClass="input filter-value-dropdown" T="string" @bind-Value="Value.FilterValue" IsInput>
                        <ValueSelectItem T="string" Value="string.Empty">All</ValueSelectItem>

                        @switch (Value.FilterType)
                        {
                            case FilterType.Id :
                                _filterItems = EventLogState.Value.ActiveLogs.Values.SelectMany(log => log.EventIds)
                                    .Distinct().OrderBy(id => id).Select(id => id.ToString()).ToList();
                                break;
                            case FilterType.Level :
                                _filterItems = new List<string>();

                                foreach (SeverityLevel item in Enum.GetValues(typeof(SeverityLevel)))
                                {
                                    _filterItems.Add(item.ToString());
                                }

                                break;
                            case FilterType.KeywordsDisplayNames :
                                _filterItems = EventLogState.Value.ActiveLogs.Values.SelectMany(log => log.KeywordNames)
                                    .Distinct().OrderBy(name => name).Select(name => name.ToString()).ToList();

                                break;
                            case FilterType.Source :
                                _filterItems = EventLogState.Value.ActiveLogs.Values.SelectMany(log => log.EventProviderNames)
                                    .Distinct().OrderBy(name => name).Select(name => name.ToString()).ToList();

                                break;
                            case FilterType.TaskCategory :
                                _filterItems = EventLogState.Value.ActiveLogs.Values.SelectMany(log => log.TaskNames)
                                    .Distinct().OrderBy(name => name).Select(name => name.ToString()).ToList();

                                break;
                            case FilterType.Description :
                            default :
                                break;
                        }

                        @foreach (var item in FilteredItems)
                        {
                            <ValueSelectItem T="string" Value="item" />
                        }
                    </ValueSelect>
                }
            </div>
        </div>
    }
    else if (string.IsNullOrWhiteSpace(Value.ComparisonString))
    {
        <span>No Filter Specified</span>
    }
    else
    {
        <span>@Value.ComparisonString</span>
    }

    <div class="justify-self-right">
        @if (Value.IsEditing)
        {
            <button class="button" @onclick="AddSubFilter">
                <i class="bi bi-plus-circle"></i> Add Sub Filter
            </button>

            <button class="button button-green" @onclick="SaveFilter">
                <i class="bi bi-check-circle"></i> Save
            </button>

            <button class="button button-red fixed-width" @onclick="RemoveFilter">
                <i class="bi bi-dash-circle"></i> Remove
            </button>
        }
        else
        {
            <button class="button" @onclick="EditFilter">
                <i class="bi bi-funnel"></i> Edit
            </button>

            @if (Value.IsEnabled)
            {
                <button class="button button-red fixed-width" @onclick="ToggleFilter">
                    <i class="bi bi-dash-circle"></i> Disable
                </button>
            }
            else
            {
                <button class="button button-green fixed-width" @onclick="ToggleFilter">
                    <i class="bi bi-plus-circle"></i> Enable
                </button>
            }
        }
    </div>
</div>

@if (Value.SubFilters.Any() && Value.IsEditing)
{
    <div class="flex-column">
        @foreach (var item in Value.SubFilters)
        {
            <SubFilterRow ParentId="Value.Id" Value="@item" />
        }
    </div>
}
